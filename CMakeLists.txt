# Copyright (c) 2024 dingodb.com, Inc. All Rights Reserved
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

cmake_minimum_required(VERSION 3.23.1 FATAL_ERROR)
project(dingo-eureka C CXX)

# third-party install path
if(NOT INSTALL_PATH)
    set(INSTALL_PATH "$ENV{HOME}/.local/dingo-eureka")
endif()
message("INSTALL_PATH:${INSTALL_PATH}")

include(ExternalProject)

ExternalProject_Add(gflags
   PREFIX gflags
   SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/gflags
   CMAKE_ARGS
       -DBUILD_STATIC_LIBS=ON
       -DBUILD_TESTING=OFF
       -DINSTALL_HEADERS=ON
   CMAKE_CACHE_ARGS
       -DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=ON
       -DCMAKE_INSTALL_PREFIX:PATH=${INSTALL_PATH}
       -DCMAKE_INSTALL_LIBDIR:PATH=${INSTALL_PATH}/lib
)

# version must less than 0.7.0, because brpc depends
ExternalProject_Add(glog
    PREFIX glog
    SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/glog
    CMAKE_ARGS
        -DBUILD_TESTING=OFF
        -DBUILD_SHARED_LIBS=OFF
        -DWITH_GFLAGS=ON
        -DWITH_UNWIND=OFF
    CMAKE_CACHE_ARGS
        -DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=ON
        -Dgflags_DIR:STRING=${INSTALL_PATH}/lib/cmake/gflags
        -DCMAKE_INSTALL_PREFIX:PATH=${INSTALL_PATH}
        -DCMAKE_INSTALL_LIBDIR:PATH=${INSTALL_PATH}/lib
    DEPENDS gflags
)

ExternalProject_Add(gtest
    PREFIX gtest
    SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/googletest
    CMAKE_CACHE_ARGS
        -DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=ON
        -DCMAKE_INSTALL_PREFIX:PATH=${INSTALL_PATH}
        -DCMAKE_INSTALL_LIBDIR:PATH=${INSTALL_PATH}/lib
)

ExternalProject_Add(fmt
    PREFIX fmt
    SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/fmt
    CMAKE_ARGS
        -DFMT_TEST=OFF
    CMAKE_CACHE_ARGS
        -DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=ON
        -DCMAKE_INSTALL_PREFIX:PATH=${INSTALL_PATH}
        -DCMAKE_INSTALL_LIBDIR:PATH=${INSTALL_PATH}/lib
)

# used by sdk/fs 
ExternalProject_Add(nlohmann-json
    PREFIX nlohmann-json
    SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/nlohmann-json
    CMAKE_ARGS 
        -DCMAKE_PREFIX_PATH=${INSTALL_PATH}
        -DJSON_BuildTests=OFF
        -DJSON_MultipleHeaders=ON
        -DJSON_Install=ON
    CMAKE_CACHE_ARGS 
        -DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=ON
        -DCMAKE_INSTALL_PREFIX:PATH=${INSTALL_PATH}
        -DCMAKE_INSTALL_LIBDIR:PATH=${INSTALL_PATH}/lib
)

# used by sdk
ExternalProject_Add(rapidjson
    PREFIX rapidjson
    SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/rapidjson
    CMAKE_ARGS
      -DBUILD_SHARED_LIBS=OFF
      -DRAPIDJSON_BUILD_DOC=OFF
      -DRAPIDJSON_BUILD_EXAMPLES=OFF
      -DRAPIDJSON_BUILD_TESTS=OFF
    CMAKE_CACHE_ARGS
        -DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=ON
        -DCMAKE_INSTALL_PREFIX:PATH=${INSTALL_PATH}
        -DCMAKE_INSTALL_LIBDIR:PATH=${INSTALL_PATH}/lib
)

# used by fs
# used by grpc protobuf 
ExternalProject_Add(jsoncpp
    PREFIX jsoncpp
    SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/jsoncpp
    CMAKE_ARGS
        -DJSONCPP_WITH_TESTS=OFF
        -DJSONCPP_WITH_POST_BUILD_UNITTEST=OFF
        -DBUILD_SHARED_LIBS=OFF
        -DBUILD_OBJECT_LIBS=OFF
    CMAKE_CACHE_ARGS
        -DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=ON
        -DCMAKE_INSTALL_PREFIX:PATH=${INSTALL_PATH}
        -DCMAKE_INSTALL_LIBDIR:PATH=${INSTALL_PATH}/lib
)

set(ZLIB_SOURCES_DIR ${CMAKE_CURRENT_SOURCE_DIR}/zlib)
set(ZLIB_BINARY_DIR ${CMAKE_CURRENT_BINARY_DIR}/zlib/build)

file(WRITE ${ZLIB_BINARY_DIR}/copy_repo.sh
     "mkdir -p ${ZLIB_BINARY_DIR} && cp -rf ${ZLIB_SOURCES_DIR}/* ${ZLIB_BINARY_DIR}/")

execute_process(COMMAND sh ${ZLIB_BINARY_DIR}/copy_repo.sh)

# used by sdk/fs 
ExternalProject_Add(zlib
    PREFIX zlib
    SOURCE_DIR ${ZLIB_BINARY_DIR}
    BINARY_DIR ${ZLIB_BINARY_DIR}
    CMAKE_ARGS
      -DBUILD_SHARED_LIBS=OFF
    CMAKE_CACHE_ARGS
        -DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=TRUE
        -DCMAKE_INSTALL_PREFIX:PATH=${INSTALL_PATH}
        -DCMAKE_INSTALL_LIBDIR:PATH=${INSTALL_PATH}/lib
)

# the openssl libdir must be relative path, this is bug: https://github.com/openssl/openssl/issues/26096
SET(OPENSSL_SOURCES_DIR ${CMAKE_CURRENT_SOURCE_DIR}/openssl)
SET(OPENSSL_BINARY_DIR ${CMAKE_CURRENT_BINARY_DIR}/openssl/build)
ExternalProject_Add(openssl
    PREFIX openssl
    SOURCE_DIR ${OPENSSL_SOURCES_DIR}
    BINARY_DIR ${OPENSSL_BINARY_DIR}
    CONFIGURE_COMMAND sh ${OPENSSL_SOURCES_DIR}/config -DOPENSSL_NO_SCTP -DOPENSSL_NO_KTLS  -DOPENSSL_USE_NODELETE -DOPENSSL_PIC -no-shared --prefix=${INSTALL_PATH} --libdir=lib 
    BUILD_COMMAND $(MAKE)
    INSTALL_COMMAND ${CMAKE_COMMAND} -E chdir ${OPENSSL_BINARY_DIR} $(MAKE) install_sw
)


SET(PROTOBUF_SOURCES_DIR ${CMAKE_CURRENT_SOURCE_DIR}/protobuf)

ExternalProject_Add(absl
    PREFIX absl
    SOURCE_DIR "${PROTOBUF_SOURCES_DIR}/third_party/abseil-cpp"
    CMAKE_ARGS
        -DABSL_BUILD_TESTING=OFF
        -DCMAKE_PREFIX_PATH=${INSTALL_PATH}
        -DABSL_USE_GOOGLETEST_HEAD=ON
    CMAKE_CACHE_ARGS
        -DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=TRUE
        -DCMAKE_INSTALL_PREFIX:PATH=${INSTALL_PATH}
        -DCMAKE_INSTALL_LIBDIR:PATH=${INSTALL_PATH}/lib
)

ExternalProject_Add(utf8_range
  PREFIX utf8_range
  SOURCE_DIR "${PROTOBUF_SOURCES_DIR}/third_party/utf8_range"
  CMAKE_CACHE_ARGS
        -DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=TRUE
        -Dutf8_range_ENABLE_TESTS:BOOL=OFF
        -Dabsl_DIR:STRING=${INSTALL_PATH}/lib/cmake/absl
        -DCMAKE_INSTALL_PREFIX:PATH=${INSTALL_PATH}
        -DCMAKE_INSTALL_LIBDIR:PATH=${INSTALL_PATH}/lib
  DEPENDS absl
)

# used by sdk/fs 
# used by grpc 
ExternalProject_Add(protobuf
  PREFIX protobuf
  SOURCE_DIR "${PROTOBUF_SOURCES_DIR}"
  CMAKE_CACHE_ARGS
        -DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=TRUE
        -Dprotobuf_BUILD_TESTS:BOOL=OFF
        -Dprotobuf_WITH_ZLIB:BOOL=ON
        -DZLIB_ROOT:STRING=${INSTALL_PATH}
        -Dprotobuf_ABSL_PROVIDER:STRING=package
        -Dabsl_DIR:STRING=${INSTALL_PATH}/lib/cmake/absl
        -Dutf8_range_DIR:STRING=${INSTALL_PATH}/lib/cmake/utf8_range
        -Dprotobuf_JSONCPP_PROVIDER:STRING=package
        -Dprotobuf_MSVC_STATIC_RUNTIME:BOOL=OFF
        -DCMAKE_INSTALL_PREFIX:PATH=${INSTALL_PATH}
#         -DCMAKE_INSTALL_LIBDIR:PATH=lib # v21.12
        -DCMAKE_INSTALL_LIBDIR:PATH=${INSTALL_PATH}/lib  # new version
  DEPENDS absl utf8_range zlib jsoncpp 
)

SET(GRPC_SOURCES_DIR ${CMAKE_CURRENT_SOURCE_DIR}/grpc)

# Builds c-ares project from the git submodule.
ExternalProject_Add(c-ares
  PREFIX c-ares
  SOURCE_DIR "${GRPC_SOURCES_DIR}/third_party/cares/cares"
  CMAKE_CACHE_ARGS
        -DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=TRUE
        -DCARES_SHARED:BOOL=OFF
        -DCARES_STATIC:BOOL=ON
        -DCARES_STATIC_PIC:BOOL=ON
        -DCMAKE_INSTALL_PREFIX:PATH=${INSTALL_PATH}
        -DCMAKE_INSTALL_LIBDIR:PATH=${INSTALL_PATH}/lib
)

# used by grpc 
# Builds re2 project from the git submodule.
ExternalProject_Add(re2
  PREFIX re2
  SOURCE_DIR "${GRPC_SOURCES_DIR}/third_party/re2"
  CMAKE_CACHE_ARGS
        -DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=TRUE
        -DCMAKE_INSTALL_PREFIX:PATH=${INSTALL_PATH}
        -DCMAKE_INSTALL_LIBDIR:PATH=${INSTALL_PATH}/lib
)

# the location where protobuf-config.cmake will be installed varies by platform
if (WIN32)
  set(_FINDPACKAGE_PROTOBUF_CONFIG_DIR "${INSTALL_PATH}/cmake")
else()
  set(_FINDPACKAGE_PROTOBUF_CONFIG_DIR "${INSTALL_PATH}/lib/cmake/protobuf")
endif()

# if OPENSSL_ROOT_DIR is set, propagate that hint path to the external projects with OpenSSL dependency.
# set(_CMAKE_ARGS_OPENSSL_ROOT_DIR "")
# if (OPENSSL_ROOT_DIR)
#   set(_CMAKE_ARGS_OPENSSL_ROOT_DIR "-DOPENSSL_ROOT_DIR:PATH=${OPENSSL_ROOT_DIR}")
# endif()

# used by sdk
# Builds gRPC based on locally checked-out sources and set arguments so that all the dependencies
# are correctly located.
ExternalProject_Add(grpc
  PREFIX grpc
  SOURCE_DIR "${GRPC_SOURCES_DIR}"
  CMAKE_ARGS 
    -DOPENSSL_USE_STATIC_LIBS=TRUE 
  CMAKE_CACHE_ARGS
        -DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=TRUE
        -DgRPC_INSTALL:BOOL=ON
        -DgRPC_BUILD_TESTS:BOOL=OFF
        -DgRPC_BUILD_MSVC_MP_COUNT:STRING=-1
        -Dutf8_range_DIR:STRING=${INSTALL_PATH}/lib/cmake/utf8_range
        -DgRPC_PROTOBUF_PROVIDER:STRING=package
        -DProtobuf_DIR:PATH=${_FINDPACKAGE_PROTOBUF_CONFIG_DIR}
        -DgRPC_RE2_PROVIDER:STRING=package
        -Dre2_DIR:STRING=${INSTALL_PATH}/lib/cmake/re2
        -DgRPC_ZLIB_PROVIDER:STRING=package
        -DZLIB_ROOT:STRING=${INSTALL_PATH}
        -DgRPC_ABSL_PROVIDER:STRING=package
        -Dabsl_DIR:STRING=${INSTALL_PATH}/lib/cmake/absl
        -DgRPC_CARES_PROVIDER:STRING=package
        -Dc-ares_DIR:PATH=${INSTALL_PATH}/lib/cmake/c-ares
        -DgRPC_SSL_PROVIDER:STRING=package
        -DOPENSSL_ROOT_DIR:PATH=${INSTALL_PATH}
        -DCMAKE_INSTALL_PREFIX:PATH=${INSTALL_PATH}
        -DCMAKE_INSTALL_LIBDIR:PATH=${INSTALL_PATH}/lib
  DEPENDS c-ares protobuf re2 zlib absl openssl
)

# use by brpc/rocksdb
ExternalProject_Add(snappy
    PREFIX snappy
    SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/snappy
    CMAKE_ARGS
      -DSNAPPY_BUILD_TESTS=OFF
      -DSNAPPY_BUILD_BENCHMARKS=OFF
    CMAKE_CACHE_ARGS
        -DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=TRUE
        -DCMAKE_INSTALL_PREFIX:PATH=${INSTALL_PATH}
        -DCMAKE_INSTALL_LIBDIR:PATH=${INSTALL_PATH}/lib
)

# use by brpc
ExternalProject_Add(leveldb
    PREFIX leveldb
    SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/leveldb
    CMAKE_ARGS
      -DLEVELDB_BUILD_TESTS=OFF
      -DLEVELDB_BUILD_BENCHMARKS=OFF
    CMAKE_CACHE_ARGS
        -DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=TRUE
        -DCMAKE_INSTALL_PREFIX:PATH=${INSTALL_PATH}
        -DCMAKE_INSTALL_LIBDIR:PATH=${INSTALL_PATH}/lib
)

# used by sdk/fs 
# If minimal .a is need, you can set  WITH_DEBUG_SYMBOLS=OFF
SET(BRPC_BINARY_DIR ${CMAKE_CURRENT_BINARY_DIR}/brpc/build)
ExternalProject_Add(brpc
    PREFIX brpc
    SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/brpc
    BINARY_DIR ${BRPC_BINARY_DIR}
    CMAKE_ARGS
      -DCMAKE_PREFIX_PATH=${INSTALL_PATH}
      -DWITH_GLOG=ON
      -DWITH_SNAPPY=ON
      -DDOWNLOAD_GTEST=OFF
      -DBUILD_BRPC_TOOLS=OFF
      -DWITH_DEBUG_SYMBOLS=OFF
      -DOPENSSL_USE_STATIC_LIBS=TRUE
    CMAKE_CACHE_ARGS
      -DOPENSSL_ROOT_DIR:PATH=${INSTALL_PATH}
      -DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=ON
      -Dgflags_DIR:STRING=${INSTALL_PATH}/lib/cmake/gflags
      -DProtobuf_DIR:PATH=${_FINDPACKAGE_PROTOBUF_CONFIG_DIR}
    BUILD_COMMAND $(MAKE) brpc-static
    INSTALL_COMMAND  ""
    COMMAND cp ${BRPC_BINARY_DIR}/output/lib/libbrpc.a ${INSTALL_PATH}/lib
    COMMAND cp -r ${BRPC_BINARY_DIR}/output/include ${INSTALL_PATH}
    DEPENDS zlib snappy protobuf leveldb gflags glog openssl
)

# used by fs
SET(BRAFT_BINARY_DIR ${CMAKE_CURRENT_BINARY_DIR}/braft/build)
set(CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS} -DUSE_BTHREAD_MUTEX)
ExternalProject_Add(braft
    PREFIX braft
    SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/braft
    BINARY_DIR ${BRAFT_BINARY_DIR}
    CMAKE_ARGS
        -DCMAKE_CXX_FLAGS=${CMAKE_CXX_FLAGS}
        -DCMAKE_CXX_STANDARD=17
        -DCMAKE_PREFIX_PATH=${INSTALL_PATH}
        -DBRPC_WITH_GLOG=ON
        -Dgflags_DIR:STRING=${INSTALL_PATH}/lib/cmake/gflags
        -DWITH_DEBUG_SYMBOLS=OFF
    CMAKE_CACHE_ARGS
        -DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=TRUE
        -DCMAKE_INSTALL_PREFIX:PATH=${INSTALL_PATH}
        -DCMAKE_INSTALL_LIBDIR:PATH=${INSTALL_PATH}/lib
    BUILD_COMMAND $(MAKE) braft-static
    INSTALL_COMMAND ""
    COMMAND cp ${BRAFT_BINARY_DIR}/output/lib/libbraft.a ${INSTALL_PATH}/lib
    COMMAND cp -r ${BRAFT_BINARY_DIR}/output/include ${INSTALL_PATH}
    DEPENDS brpc
)

# use by rocksdb
ExternalProject_Add(lz4
    PREFIX lz4
    SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/lz4
    CONFIGURE_COMMAND ""
    BUILD_IN_SOURCE 1
    BUILD_COMMAND $(MAKE)
    INSTALL_COMMAND ${CMAKE_COMMAND} -E chdir <SOURCE_DIR> $(MAKE) PREFIX=${INSTALL_PATH} install
)

# use by rocksdb
ExternalProject_Add(zstd
    PREFIX zstd
    SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/zstd
    CONFIGURE_COMMAND ""
    BUILD_IN_SOURCE 1
    BUILD_COMMAND $(MAKE)
    INSTALL_COMMAND ${CMAKE_COMMAND} -E chdir <SOURCE_DIR> $(MAKE) PREFIX=${INSTALL_PATH} install
)

# used by fs
ExternalProject_Add(rocksdb
    PREFIX rocksdb
    SOURCE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/rocksdb"
    CMAKE_ARGS
        -DCMAKE_PREFIX_PATH=${INSTALL_PATH}
        -DPORTABLE=ON
        -DWITH_SNAPPY=ON
        -DWITH_LZ4=ON
        -DWITH_ZSTD=ON
        -DWITH_ZLIB=ON
        -DWITH_RUNTIME_DEBUG=ON
        -DROCKSDB_BUILD_SHARED=OFF
        -DWITH_BENCHMARK_TOOLS=OFF
        -DWITH_TESTS=OFF
        -DWITH_CORE_TOOLS=OFF
        -DWITH_TOOLS=OFF
        -DWITH_TRACE_TOOLS=OFF
    CMAKE_CACHE_ARGS
        -DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=TRUE
        -DZLIB_ROOT:STRING=${INSTALL_PATH}
        -DCMAKE_INSTALL_PREFIX:PATH=${INSTALL_PATH}
        -DCMAKE_INSTALL_LIBDIR:PATH=${INSTALL_PATH}/lib
  DEPENDS gflags zlib snappy lz4 zstd
)

SET(LIBUNWIND_SOURCES_DIR ${CMAKE_CURRENT_SOURCE_DIR}/libunwind)
SET(LIBUNWIND_BINARY_DIR ${CMAKE_CURRENT_BINARY_DIR}/libunwind/build)
ExternalProject_Add(libunwind
    PREFIX libunwind
    SOURCE_DIR ${LIBUNWIND_SOURCES_DIR}
    BINARY_DIR ${LIBUNWIND_BINARY_DIR}
    CONFIGURE_COMMAND autoreconf -i ${LIBUNWIND_SOURCES_DIR}
        COMMAND ${LIBUNWIND_SOURCES_DIR}/configure --prefix ${INSTALL_PATH} --disable-minidebuginfo --enable-static --enable-shared=no --with-pic --disable-msabi-support
    BUILD_COMMAND $(MAKE)
    INSTALL_COMMAND $(MAKE) install
)

if(NOT DEFINED GPERFTOOLS_SETUP_DONE)
    SET(GPERFTOOLS_SOURCES_DIR ${CMAKE_CURRENT_SOURCE_DIR}/gperftools)
    SET(GPERFTOOLS_BUILD_DIR ${CMAKE_CURRENT_BINARY_DIR}/gperftools/build)
    file(WRITE ${GPERFTOOLS_BUILD_DIR}/copy_repo.sh
         "mkdir -p ${GPERFTOOLS_BUILD_DIR} && cp -rf ${GPERFTOOLS_SOURCES_DIR}/* ${GPERFTOOLS_BUILD_DIR}/")
    execute_process(COMMAND sh ${GPERFTOOLS_BUILD_DIR}/copy_repo.sh)
    ExternalProject_Add(gperftools
        PREFIX gperftools
        SOURCE_DIR ${GPERFTOOLS_BUILD_DIR}
        BUILD_IN_SOURCE 1
        CONFIGURE_COMMAND sh autoreconf -i -f 
            COMMAND patch --forward -t --reject-file=- m4/libtool.m4 m4/libtool.patch 
            COMMAND sh autoreconf -i
            COMMAND sh configure --prefix=${INSTALL_PATH} --enable-shared=no --enable-static=yes --with-pic --enable-libunwind --enable-cpu-profiler --enable-heap-profiler --enable-heap-checker
        BUILD_COMMAND $(MAKE)
        INSTALL_COMMAND $(MAKE) install
      DEPENDS libunwind
    )

    set(GPERFTOOLS_SETUP_DONE TRUE)
endif()

SET(LIBURING_SOURCES_DIR ${CMAKE_CURRENT_SOURCE_DIR}/liburing)
ExternalProject_Add(liburing
    PREFIX liburing
    SOURCE_DIR ${LIBURING_SOURCES_DIR}
    BUILD_IN_SOURCE 1
    CONFIGURE_COMMAND sh ${LIBURING_SOURCES_DIR}/configure  --prefix=${INSTALL_PATH} 
    BUILD_COMMAND $(MAKE)
    INSTALL_COMMAND $(MAKE) install
)

SET(LIBBACKTRACE_SOURCES_DIR ${CMAKE_CURRENT_SOURCE_DIR}/libbacktrace)
ExternalProject_Add(libbacktrace
    PREFIX libbacktrace
    SOURCE_DIR ${LIBBACKTRACE_SOURCES_DIR}
    BUILD_IN_SOURCE 1
    CONFIGURE_COMMAND sh ${LIBBACKTRACE_SOURCES_DIR}/configure  --prefix=${INSTALL_PATH} 
    BUILD_COMMAND $(MAKE) AM_CFLAGS=-fPIC
    INSTALL_COMMAND $(MAKE) install
)

# used by fs
SET(INCBIN_SOURCES_DIR ${CMAKE_CURRENT_SOURCE_DIR}/incbin)
ExternalProject_Add(incbin
    PREFIX incbin
    SOURCE_DIR "${INCBIN_SOURCES_DIR}"
    BINARY_DIR "${INCBIN_SOURCES_DIR}"
    CONFIGURE_COMMAND ""
    BUILD_COMMAND ""
    INSTALL_COMMAND ${CMAKE_COMMAND} -E make_directory ${INSTALL_PATH}/include
    COMMAND cp ${INCBIN_SOURCES_DIR}/incbin.h ${INSTALL_PATH}/include
)

# used by fs
SET(LIBFIU_SOURCES_DIR ${CMAKE_CURRENT_SOURCE_DIR}/libfiu)
ExternalProject_Add(libfiu
    PREFIX libfiu
    SOURCE_DIR ${LIBFIU_SOURCES_DIR}
    BUILD_IN_SOURCE ON
    CONFIGURE_COMMAND ""
    BUILD_COMMAND $(MAKE)
    INSTALL_COMMAND ${CMAKE_COMMAND} -E chdir <SOURCE_DIR> $(MAKE) PREFIX=${INSTALL_PATH} install
)

# used by fs
ExternalProject_Add(crc32c
    PREFIX crc32c
    SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/crc32c
    CMAKE_ARGS
        -DCRC32C_BUILD_TESTS=OFF
        -DCRC32C_BUILD_BENCHMARKS=OFF
        -DCRC32C_USE_GLOG=OFF
    CMAKE_CACHE_ARGS
        -DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=ON
        -DCMAKE_INSTALL_PREFIX:PATH=${INSTALL_PATH}
        -DCMAKE_INSTALL_LIBDIR:PATH=${INSTALL_PATH}/lib
)

# used by fs
ExternalProject_Add(memcache
    PREFIX memcache
    SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/memcache
    CMAKE_ARGS
        -DBUILD_SHARED_LIBS=OFF
        -DBUILD_DOCS=OFF
        -DBUILD_DOCSONLY=OFF
    CMAKE_CACHE_ARGS
        -DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=ON
        -DCMAKE_INSTALL_PREFIX:PATH=${INSTALL_PATH}
        -DCMAKE_INSTALL_LIBDIR:PATH=${INSTALL_PATH}/lib
)

# used by fs
ExternalProject_Add(spdlog
    PREFIX spdlog
    SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/spdlog
    CMAKE_ARGS
        -DSPDLOG_BUILD_SHARED=OFF
        -DSPDLOG_BUILD_EXAMPLE_HO=OFF
    CMAKE_CACHE_ARGS
        -DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=ON
        -DCMAKE_INSTALL_PREFIX:PATH=${INSTALL_PATH}
        -DCMAKE_INSTALL_LIBDIR:PATH=${INSTALL_PATH}/lib
)

# used by fs
# used by aws
ExternalProject_Add(curl
   PREFIX curl
   SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/curl
   CMAKE_ARGS
       -DCMAKE_PREFIX_PATH=${INSTALL_PATH}
       -DBUILD_STATIC_LIBS=ON
       -DBUILD_CURL_EXE=OFF
       -DCURL_DISABLE_LDAP=ON
       -DBUILD_SHARED_LIBS=OFF
       -DBUILD_STATIC_CURL=OFF
       -DUSE_LIBIDN2=OFF
   CMAKE_CACHE_ARGS
       -DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=ON
       -DCMAKE_INSTALL_PREFIX:PATH=${INSTALL_PATH}
       -DCMAKE_INSTALL_LIBDIR:PATH=${INSTALL_PATH}/lib
    DEPENDS zlib openssl
)

# used by fs
# used by aws
ExternalProject_Add(opentelemetry-cpp
    PREFIX opentelemetry-cpp
    SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/opentelemetry-cpp
    CMAKE_ARGS 
        -DCMAKE_PREFIX_PATH=${INSTALL_PATH}
        -DBUILD_SHARED_LIBS=OFF
        -DWITH_OTLP_GRPC=OFF
        -DWITH_OTLP_HTTP=ON
        -DWITH_PROMETHEUS=OFF
        -DBUILD_TESTING=OFF 
        -DWITH_EXAMPLES=OFF
        -DWITH_EXAMPLES_HTTP=OFF
    CMAKE_CACHE_ARGS
        -DOPENSSL_ROOT_DIR:PATH=${INSTALL_PATH}
        -DProtobuf_DIR:PATH=${_FINDPACKAGE_PROTOBUF_CONFIG_DIR}
        -DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=TRUE
        -DCMAKE_INSTALL_PREFIX:PATH=${INSTALL_PATH}
        -DCMAKE_INSTALL_LIBDIR:PATH=${INSTALL_PATH}/lib
    DEPENDS curl protobuf openssl nlohmann-json
)

# used by fs
ExternalProject_Add(aws-sdk-cpp
    PREFIX aws-sdk-cpp
    SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/aws-sdk-cpp
    CMAKE_ARGS
        -DCMAKE_PREFIX_PATH=${INSTALL_PATH}
        -DBUILD_SHARED_LIBS=OFF
        -DENABLE_TESTING=OFF
        -DAUTORUN_UNIT_TESTS=OFF
        -DBUILD_ONLY=s3
        -DBUILD_OPTEL=ON
        -DBUILD_OPTEL_OTLP_BENCHMARKS=ON # if not turn on the opentelemetry cmake find will fail[
    CMAKE_CACHE_ARGS
        -DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=TRUE
        -DCMAKE_INSTALL_PREFIX:PATH=${INSTALL_PATH}
        -DCMAKE_INSTALL_LIBDIR:PATH=${INSTALL_PATH}/lib
    DEPENDS curl zlib openssl opentelemetry-cpp
)

# used by fs
ExternalProject_Add(libuuid
    PREFIX libuuid
    SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/libuuid-cmake
    CMAKE_ARGS
        -DCMAKE_PREFIX_PATH=${INSTALL_PATH}
        -DLIBUUID_STATIC=ON
        -DLIBUUID_SHARED=OFF
    CMAKE_CACHE_ARGS
        -DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=TRUE
        -DCMAKE_INSTALL_PREFIX:PATH=${INSTALL_PATH}
        -DCMAKE_INSTALL_LIBDIR:PATH=${INSTALL_PATH}/lib
)

# used for sdk benchmark
ExternalProject_Add(hdf5
    PREFIX hdf5 
    SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/hdf5
    CMAKE_ARGS
      -C ${CMAKE_CURRENT_SOURCE_DIR}/hdf5/config/cmake/cacheinit.cmake
      -DHDF5_ENABLE_SZIP_SUPPORT=OFF
      -DHDF5_ENABLE_Z_LIB_SUPPORT=ON
      -DHDF5_BUILD_CPP_LIB=ON
      -DHDF5_BUILD_EXAMPLES=OFF
      -DHDF5_BUILD_TOOLS=OFF
      -DBUILD_SHARED_LIBS=OFF
      -DBUILD_TESTING=OFF
      -DHDF5_BUILD_JAVA=OFF
      -DHDF5_BUILD_FORTRAN=OFF
      -DHDF5_BUILD_HL_GIF_TOOLS=OFF
    CMAKE_CACHE_ARGS
        -DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=TRUE
        -DCMAKE_INSTALL_PREFIX:PATH=${INSTALL_PATH}
        -DCMAKE_INSTALL_LIBDIR:PATH=${INSTALL_PATH}/lib
    DEPENDS zlib
)
